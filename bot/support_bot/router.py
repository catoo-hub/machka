import logging
from typing import Optional, List

from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from config.settings import Settings
from bot.states.support_states import (
    SupportTicketStates,
    SupportTicketReplyStates,
    SupportAdminReplyStates,
)
from bot.services.support_service import SupportService
from db.models import SupportTicket


USER_MENU_NEW = "‚úçÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ"
USER_MENU_LIST = "üì® –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"
ADMIN_MENU_OPEN = "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ"
ADMIN_MENU_STARRED = "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ"


def is_support_admin(user_id: int, settings: Settings) -> bool:
    if user_id in settings.support_admin_ids:
        return True
    if user_id in settings.ADMIN_IDS:
        return True
    if settings.PRIMARY_ADMIN_ID and user_id == settings.PRIMARY_ADMIN_ID:
        return True
    return False


async def notify_admins(bot: Bot, settings: Settings, text: str) -> None:
    admin_ids: List[int] = settings.support_admin_ids or []
    if not admin_ids:
        admin_ids = settings.ADMIN_IDS
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logging.debug("Failed to notify admin %s: %s", admin_id, e)


async def notify_user(bot: Bot, user_id: Optional[int], text: str) -> None:
    if not user_id:
        return
    try:
        await bot.send_message(user_id, text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.debug("Failed to notify support user %s: %s", user_id, e)


def build_user_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text=USER_MENU_NEW)
    builder.button(text=USER_MENU_LIST)
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def build_admin_menu() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text=ADMIN_MENU_OPEN)
    builder.button(text=ADMIN_MENU_STARRED)
    builder.button(text=USER_MENU_LIST)
    builder.button(text=USER_MENU_NEW)
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def render_ticket_preview(ticket: SupportTicket) -> str:
    subject = ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã"
    status = "üü¢ –æ—Ç–∫—Ä—ã—Ç–æ" if ticket.status == "open" else "üîí –∑–∞–∫—Ä—ã—Ç–æ"
    star = "‚≠ê " if ticket.is_starred else ""
    return f"{star}#{ticket.ticket_id} ‚Äî {subject} ({status})"


def render_ticket_details(ticket: SupportTicket) -> str:
    lines = [
        f"<b>–¢–∏–∫–µ—Ç #{ticket.ticket_id}</b>",
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –û—Ç–∫—Ä—ã—Ç' if ticket.status == 'open' else 'üîí –ó–∞–∫—Ä—ã—Ç'}",
    ]
    if ticket.subject:
        lines.append(f"–¢–µ–º–∞: {ticket.subject}")
    if ticket.user_id:
        lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{ticket.user_id}</code>")
    if ticket.is_starred:
        lines.append("‚≠ê –û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤–∞–∂–Ω—ã–π")
    lines.append("")
    for message in ticket.messages[-10:]:
        author = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if message.sender_type == "user" else ("–ê–¥–º–∏–Ω" if message.sender_type == "admin" else "–°–∏—Å—Ç–µ–º–∞")
        lines.append(f"<b>{author}</b>: {message.content}")
    return "\n".join(lines)


def ticket_user_keyboard(ticket: SupportTicket) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if ticket.status == "open":
        builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support:reply:{ticket.ticket_id}")
        builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"support:close:{ticket.ticket_id}")
    else:
        builder.button(text="üîì –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"support:open:{ticket.ticket_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="support:back")
    builder.adjust(1)
    return builder.as_markup()


def ticket_admin_keyboard(ticket: SupportTicket) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if ticket.status == "open":
        builder.button(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support:admin_reply:{ticket.ticket_id}")
        builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"support:close:{ticket.ticket_id}")
    else:
        builder.button(text="üîì –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"support:open:{ticket.ticket_id}")
    star_text = "‚≠ê –£–±—Ä–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å" if ticket.is_starred else "‚≠ê –°–¥–µ–ª–∞—Ç—å –≤–∞–∂–Ω—ã–º"
    builder.button(text=star_text, callback_data=f"support:star:{ticket.ticket_id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"support:delete:{ticket.ticket_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="support:back")
    builder.adjust(1)
    return builder.as_markup()


def build_support_router(settings: Settings, support_service: SupportService) -> Router:
    router = Router(name="support-bot")

    @router.message(CommandStart())
    async def start_handler(message: types.Message) -> None:
        is_admin = is_support_admin(message.from_user.id, settings)
        keyboard = build_admin_menu() if is_admin else build_user_menu()
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.",
            reply_markup=keyboard,
        )

    @router.message(F.text == USER_MENU_NEW)
    async def new_ticket_prompt(message: types.Message, state: FSMContext) -> None:
        await state.set_state(SupportTicketStates.waiting_for_subject)
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è.")

    @router.message(SupportTicketStates.waiting_for_subject)
    async def subject_received(message: types.Message, state: FSMContext) -> None:
        subject = (message.text or "").strip()
        await state.update_data(subject=subject)
        await state.set_state(SupportTicketStates.waiting_for_description)
        await message.answer("‚úâÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É." )

    @router.message(SupportTicketStates.waiting_for_description)
    async def description_received(message: types.Message, state: FSMContext, bot: Bot) -> None:
        data = await state.get_data()
        subject = data.get("subject")
        description = (message.text or message.caption or "").strip()
        ticket = await support_service.create_ticket_with_message(
            user_id=message.from_user.id,
            subject=subject,
            message=description,
            username=message.from_user.username,
        )
        await state.clear()
        await message.answer(
            f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.ticket_id} —Å–æ–∑–¥–∞–Ω–æ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ.",
            reply_markup=build_user_menu(),
        )
        await notify_admins(
            bot,
            settings,
            f"üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.ticket_id} –æ—Ç <code>{message.from_user.id}</code>\n–¢–µ–º–∞: {subject or '–±–µ–∑ —Ç–µ–º—ã'}",
        )

    @router.message(F.text == USER_MENU_LIST)
    async def list_user_tickets(message: types.Message) -> None:
        tickets = await support_service.get_user_tickets(message.from_user.id)
        if not tickets:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        builder = InlineKeyboardBuilder()
        for ticket in tickets[:15]:
            builder.button(
                text=render_ticket_preview(ticket),
                callback_data=f"support:view:{ticket.ticket_id}"
            )
        builder.adjust(1)
        await message.answer(
            "üì® –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(),
        )

    @router.message(F.text == ADMIN_MENU_OPEN)
    async def list_open_tickets_for_admin(message: types.Message) -> None:
        if not is_support_admin(message.from_user.id, settings):
            return
        tickets, total = await support_service.get_paginated(page=1, per_page=20, status="open")
        if not tickets:
            await message.answer("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        builder = InlineKeyboardBuilder()
        for ticket in tickets:
            builder.button(text=render_ticket_preview(ticket), callback_data=f"support:view:{ticket.ticket_id}")
        builder.adjust(1)
        await message.answer(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: {total}", reply_markup=builder.as_markup())

    @router.message(F.text == ADMIN_MENU_STARRED)
    async def list_starred_tickets(message: types.Message) -> None:
        if not is_support_admin(message.from_user.id, settings):
            return
        tickets, total = await support_service.get_paginated(page=1, per_page=50, is_starred=True)
        if not tickets:
            await message.answer("‚≠ê –ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        builder = InlineKeyboardBuilder()
        for ticket in tickets:
            builder.button(text=render_ticket_preview(ticket), callback_data=f"support:view:{ticket.ticket_id}")
        builder.adjust(1)
        await message.answer(f"‚≠ê –í–∞–∂–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: {total}", reply_markup=builder.as_markup())

    @router.callback_query(F.data.startswith("support:view:"))
    async def view_ticket(callback: types.CallbackQuery) -> None:
        ticket_id = int(callback.data.split(":")[-1])
        ticket = await support_service.get_ticket(ticket_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        text = render_ticket_details(ticket)
        keyboard = ticket_admin_keyboard(ticket) if is_support_admin(callback.from_user.id, settings) else ticket_user_keyboard(ticket)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    @router.callback_query(F.data == "support:back")
    async def back_to_menu(callback: types.CallbackQuery) -> None:
        is_admin = is_support_admin(callback.from_user.id, settings)
        keyboard = build_admin_menu() if is_admin else build_user_menu()
        await callback.message.edit_text(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.",
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await callback.answer()

    @router.callback_query(F.data.startswith("support:reply:"))
    async def user_reply(callback: types.CallbackQuery, state: FSMContext) -> None:
        ticket_id = int(callback.data.split(":")[-1])
        await state.update_data(reply_ticket_id=ticket_id)
        await state.set_state(SupportTicketReplyStates.waiting_for_reply)
        await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await callback.answer()

    @router.message(SupportTicketReplyStates.waiting_for_reply)
    async def user_reply_received(message: types.Message, state: FSMContext, bot: Bot) -> None:
        data = await state.get_data()
        ticket_id = data.get("reply_ticket_id")
        await state.clear()
        reply_text = (message.text or message.caption or "").strip()
        if not ticket_id or not reply_text:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        msg = await support_service.add_user_message(
            ticket_id=ticket_id,
            user_id=message.from_user.id,
            message=reply_text,
            username=message.from_user.username,
        )
        if not msg:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        await notify_admins(
            bot,
            settings,
            f"üì• –û—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –æ—Ç <code>{message.from_user.id}</code>:\n{reply_text}",
        )

    @router.callback_query(F.data.startswith("support:close:"))
    async def close_ticket(callback: types.CallbackQuery, bot: Bot) -> None:
        ticket_id = int(callback.data.split(":")[-1])
        ticket = await support_service.update_status(ticket_id=ticket_id, new_status="closed", admin_id=callback.from_user.id if is_support_admin(callback.from_user.id, settings) else None)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        await callback.message.edit_text(render_ticket_details(ticket), reply_markup=ticket_admin_keyboard(ticket) if is_support_admin(callback.from_user.id, settings) else ticket_user_keyboard(ticket))
        await callback.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        await notify_user(bot, ticket.user_id, f"üîí –í–∞—à —Ç–∏–∫–µ—Ç #{ticket.ticket_id} –∑–∞–∫—Ä—ã—Ç.")

    @router.callback_query(F.data.startswith("support:open:"))
    async def open_ticket(callback: types.CallbackQuery, bot: Bot) -> None:
        ticket_id = int(callback.data.split(":")[-1])
        ticket = await support_service.update_status(ticket_id=ticket_id, new_status="open", admin_id=callback.from_user.id if is_support_admin(callback.from_user.id, settings) else None)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        await callback.message.edit_text(render_ticket_details(ticket), reply_markup=ticket_admin_keyboard(ticket) if is_support_admin(callback.from_user.id, settings) else ticket_user_keyboard(ticket))
        await callback.answer("–¢–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç")
        await notify_user(bot, ticket.user_id, f"üîì –í–∞—à —Ç–∏–∫–µ—Ç #{ticket.ticket_id} —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç.")

    @router.callback_query(F.data.startswith("support:star:"))
    async def toggle_star(callback: types.CallbackQuery) -> None:
        if not is_support_admin(callback.from_user.id, settings):
            await callback.answer()
            return
        ticket_id = int(callback.data.split(":")[-1])
        ticket = await support_service.toggle_star(ticket_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        await callback.message.edit_text(render_ticket_details(ticket), reply_markup=ticket_admin_keyboard(ticket))
        await callback.answer("–°—Ç–∞—Ç—É—Å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")

    @router.callback_query(F.data.startswith("support:delete:"))
    async def delete_ticket(callback: types.CallbackQuery) -> None:
        if not is_support_admin(callback.from_user.id, settings):
            await callback.answer()
            return
        ticket_id = int(callback.data.split(":")[-1])
        deleted = await support_service.delete_ticket(ticket_id)
        if deleted:
            await callback.message.edit_text("üóë –¢–∏–∫–µ—Ç —É–¥–∞–ª—ë–Ω.")
            await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    @router.callback_query(F.data.startswith("support:admin_reply:"))
    async def admin_reply(callback: types.CallbackQuery, state: FSMContext) -> None:
        if not is_support_admin(callback.from_user.id, settings):
            await callback.answer()
            return
        ticket_id = int(callback.data.split(":")[-1])
        await state.update_data(admin_reply_ticket_id=ticket_id)
        await state.set_state(SupportAdminReplyStates.waiting_for_admin_reply)
        await callback.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await callback.answer()

    @router.message(SupportAdminReplyStates.waiting_for_admin_reply)
    async def admin_reply_received(message: types.Message, state: FSMContext, bot: Bot) -> None:
        if not is_support_admin(message.from_user.id, settings):
            await state.clear()
            return
        data = await state.get_data()
        ticket_id = data.get("admin_reply_ticket_id")
        await state.clear()
        reply_text = (message.text or message.caption or "").strip()
        if not ticket_id or not reply_text:
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
            return
        msg = await support_service.add_admin_message(
            ticket_id=ticket_id,
            admin_id=message.from_user.id,
            message=reply_text,
            username=message.from_user.username,
        )
        if not msg:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
            return
        ticket = await support_service.get_ticket(ticket_id)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await notify_user(bot, ticket.user_id if ticket else None, f"üì® –û—Ç–≤–µ—Ç –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}:\n{reply_text}")

    return router
